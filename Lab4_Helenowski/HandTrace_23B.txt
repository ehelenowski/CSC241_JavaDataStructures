23B.

The book explicitly states to trace the execution of numPaths with n = 4 by hand and then to state why the algorithm is inefficient. The stack trace  is shown here between the two lines. The answer you get for when n = 4, is that there are 20 paths. To skip to see where I explain why the algorithm is inefficient, skip till after the second line.

——————————————————————————————————————————————————————————————————————————————

The stack trace can be seen below- note that things are evaluated from left to right and that moves right are evaluated first (column incremented first before the row is incremented):

numPaths(1,1,4)
= numPaths(1,2,4) + numPaths(2,1,4)
= numPaths(1,3,4) + numPaths(2,2,4) + numPaths(2,1,4)
= numPaths(1,4,4) + numPaths(2,3,4) + numPaths(2,2,4) + numPaths(2,1,4)
= 1 + numPaths(2,3,4) + numPaths(2,2,4) + numPaths(2,1,4)
= 1 + numPaths(2,4,4) + numPaths(3,3,4) + numPaths(2,2,4) + numPaths(2,1,4)
= 2 + numPaths(3,4,4) + numPaths(4,3,4) + numPaths(2,2,4) + numPaths(2,1,4)
= 3 + numPaths(4,3,4) + numPaths(2,2,4) + numPaths(2,1,4)
= 4 + numPaths(2,2,4) + numPaths(2,1,4)
= 4 + numPaths(2,3,4) + numPaths(3,2,4) + numPaths(2,1,4)
= 4 + numPaths(2,4,4) + numPaths(3,3,4) + numPaths(3,2,4) + numPaths(2,1,4)
= 5 + numPaths(3,3,4) + numPaths(3,2,4) + numPaths(2,1,4)
= 5 + numPaths(3,4,4) + numPaths(4,3,4) + numPaths(3,2,4) + numPaths(2,1,4)
= 6 + numPaths(4,3,4) + numPaths(3,2,4) + numPaths(2,1,4)
= 7 + numPaths(3,2,4) + numPaths(2,1,4)
= 7 + numPaths(3,3,4) + numPaths(4,2,4) + numPaths(2,1,4)
= 7 + numPaths(3,4,4) + numPaths(4,3,4) + numPaths(4,2,4) + numPaths(2,1,4)
= 8 + numPaths(4,3,4) + numPaths(4,2,4) + numPaths(2,1,4)
= 9 + numPaths(4,2,4) + numPaths(2,1,4)
= 10 + numPaths(2,1,4)
= 10 + numPaths(2,2,4) + numPaths(3,1,4)
= 10 + numPaths(2,3,4) + numPaths(3,2,4) + numPaths(3,1,4)
= 10 + numPaths(2,4,4) + numPaths(3,3,4) + numPaths(3,2,4) + numPaths(3,1,4)
= 11 + numPaths(3,3,4) + numPaths(3,2,4) + numPaths(3,1,4)
= 11 + numPaths(3,4,4) + numPaths(4,3,4) + numPaths(3,2,4) + numPaths(3,1,4)
= 12 + numPaths(4,3,4) + numPaths(3,2,4) + numPaths(3,1,4)
= 13 + numPaths(3,2,4) + numPaths(3,1,4)
= 13 + numPaths(3,3,4) + numPaths(4,2,4) + numPaths(3,1,4)
= 13 + numPaths(3,4,4) + numPaths(4,3,4) + numPaths(4,2,4) + numPaths(3,1,4)
= 14 + numPaths(4,3,4) + numPaths(4,2,4) + numPaths(3,1,4)
= 15 + numPaths(4,2,4) + numPaths(3,1,4)
= 16 + numPaths(3,1,4)
= 16 + numPaths(3,2,4) + numPaths(4,1,4)
= 16 + numPaths(3,3,4) + numPaths(4,2,4) + numPaths(4,1,4)
= 16 + numPaths(3,4,4) + numPaths(4,3,4) + numPaths(4,2,4) + numPaths(4,1,4)
= 17 + numPaths(4,3,4) + numPaths(4,2,4) + numPaths(4,1,4)
= 18 + numPaths(4,2,4) + numPaths(4,1,4)
= 19 + numPaths(4,1,4)
= 20

A total of 39 calls

——————————————————————————————————————————————————————————————————————————————

It isn’t hard to understand why this algorithm is so inefficient. You can see that it take many, many steps to solve this problem, as well as the number of paths for multiple grid points being recalculated many times, just for N = 4. Imagine an even larger number, it would get way out of hand. The issue with this algorithm is that it uses purely brute force. It finds every single possible path and counts each possible path that way. This is a valid solution, but it would be very slow for larger numbers. One solution to this would be to hold the intermediate values of numPaths in a two dimensional array of integers, to keep the method from recalculating values that it has already done. Another solution, if you view this question from a more mathematical prospective, rather than brute forcing it, you can come up with a much more elegant solution. The truth is, you don’t have to go and find every possible path to answer the question of how many possible paths there are. You can see that for a grid of size N = 4, that in order to reach the point (4,4) you need to move right 3 times and up 3 times, no matter how you get there. You see, really you just need to know the number of possible combinations of 3 up moves and 3 right moves, with 6 total moves. You can do this by using the combination formula, C(6,3) or (6!/3!)/3! = 20. Using your knowledge of combinations and the problem, it is simple to see that the problem is easily solved by simply returning the value (2*(N-1))!/((N-1)/2)!/((N-1)/2)!. By switching to a pure mathematical formula, you get an elegant mathematical solution that operates in O(1) or bounded time because the amount of work doesn’t depend on the number of entries. Clearly, find the number of combinations of possible up and right moves is a much more efficient way of solving the problem than brute forcing it using recursion. 
