package Lab10;

public class HashTable {
	private int size;
	private Hashable[] table;
	private int numElements = 0;
	private int location;
	private int relativePrime;
	
	public HashTable(int size, int relativePrime){
		/*
		 * Precondition: The size and relativePrime are relatively prime with respect to each other.
		 * 
		 * Postcondition: A hash table of the relevant size is is instantiated.
		 */
		this.size = size;
		table = new Hashable[size];
		this.relativePrime = relativePrime;
	}
	
	public void add(Hashable element){
		/*
		 * Precondition: The table is not full
		 * 
		 * Postcondition: Adds the element
		 */
		if(this.getSize() < size){
		location = element.hash(size);
		int numCheck = 0;
		
		while (table[location] != null && numCheck <= size){
			location = (location + relativePrime) % size; //Uses a linear probing rehash function to handle collisions
			numCheck++;
		}
		
		table[location] = element;
		numElements++;	
		}
	}
	
	public Hashable get(Hashable element){
		/*
		 * Precondition: You search for an Hashable element
		 * 
		 * Postcondition: The element is returned if it exists in the
		 * has or null is returned if it doesn't exist.
		 */
		location = element.hash(size);
		int numCheck = 0;
		
		while (!table[location].equals(element) && numCheck <= size){ //Uses linear probing to find an element
			location = (location+relativePrime) % size; 
			numCheck++;
		}
		if (table[location].equals(element))
			return table[location];
		return null;
	}
	
	public void remove(Hashable element){
		if (this.get(element) != null){
			table[location] = null;
			numElements--;
		}
	}
	
	public boolean contain(Hashable element){
		return this.get(element) != null;
	}
	
	
	public int getSize(){
		return numElements;
	}
}
