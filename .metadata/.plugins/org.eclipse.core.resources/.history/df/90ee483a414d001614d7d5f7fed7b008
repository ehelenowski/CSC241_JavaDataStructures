package graphs;

import queues.LinkedUnbndQueue;

public class RefGraphNode<T> {
	private T info;
	private RefGraphNode<T> nextNode;
	private EdgeNode<T> adjNode;
	
	public RefGraphNode(){}
	
	public RefGraphNode(T info) {
		this.info = info;
	}
	
	public void setInfo(T info){
		this.info = info;
	}
	
	public T getInfo(){
		return info;
	}
	
	public void setNext(RefGraphNode<T> next){
		this.nextNode = next;
	}
	
	public RefGraphNode<T> getNextNode(){
		return nextNode;
	}
	
	public LinkedUnbndQueue<RefGraphNode<T>> getAdjacentNodes(){
		if (adjNode == null) //Check for adjacent nodes, to see if any edges exist, if none do, return null
			return null;
		LinkedUnbndQueue<RefGraphNode<T>> acc = new LinkedUnbndQueue<RefGraphNode<T>>();
		EdgeNode<T> iter = adjNode;
		while (iter != null){
			iter
		}
		return null;
	}
	
	public void addAdjacent(EdgeNode<T> adj){
		if (adjNode == null){
			adjNode = adj;
		}
		else{
			EdgeNode<T> iter = adjNode;
			while (iter.getNext() != null)
				iter = iter.getNext();
			iter.setNext(adj);
		}
	}
	
	public boolean equals(RefGraphNode<T> that){
		return this.info == that.info;
	}
	
	
}
