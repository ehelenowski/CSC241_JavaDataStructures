package Lab10;

public class HashTable {
	private int size;
	private Hashable[] table;
	private int numElements = 0;
	private int location;
	private int relativePrime;
	private int numCompares;
	
	public HashTable(int size, int relativePrime){
		/*
		 * Precondition: The size and relativePrime are relatively prime with respect to each other.
		 * 
		 * Postcondition: A hash table of the relevant size is is instantiated.
		 */
		this.size = size;
		table = new Hashable[size];
		this.relativePrime = relativePrime;
	}
	
	public void add(Hashable element){
		/*
		 * Precondition: You add a hashable element
		 * 
		 * Postcondition: Adds the element to the hash table
		 */
		
			if(!isFull()){
			location = element.hash(size);
			
			while (table[location] != null){
				location = (location + relativePrime) % size; //Uses a linear probing rehash function to handle collisions
			}
		
			table[location] = element;
			numElements++;	}
	}
	
	public boolean isFull(){
		return this.getSize() == numElements;
	}
	
	private void resetCompares(){
		numCompares = 0;
	}
	
	public Hashable get(Hashable element){
		/*
		 * Precondition: You search for an Hashable element
		 * 
		 * Postcondition: The element is returned if it exists in the
		 * has or null is returned if it doesn't exist.
		 */
		location = element.hash(size);
		int numCheck = 0;
		resetCompares();
		
		while (numCheck <= size){ //Uses linear probing to find an element
			numCompares++;
			if (table[location].equals(element))
				return table[location];
			location = (location+relativePrime) % size; 
			numCheck++;
		}
		return null;
	}
	
	public int getNumberCompares(){
		//Returns the number of compares used the last time that the get method was called
		return numCompares;
	}
	
	public void remove(Hashable element){
		//Removes an element if it is in the hash table
		if (this.get(element) != null){
			table[location] = null;
			numElements--;
		}
	}
	
	public boolean contains(Hashable element){
		return element.equals(this.get(element));
	}
	
	
	public int getSize(){
		return size;
	}
	
	public String toString(){
		String r = "HashTable of Size "+size+" is: \n";
		for (int i = 0; i < size; i++){
			r += table[i] + System.lineSeparator();
		}
		return r;
	}
}
